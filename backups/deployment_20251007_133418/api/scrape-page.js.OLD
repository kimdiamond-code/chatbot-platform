// API endpoint to scrape content from a webpage
export default async function handler(req, res) {
  // Enable CORS
  res.setHeader('Access-Control-Allow-Credentials', true);
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS,POST');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { url } = req.body;

    if (!url) {
      return res.status(400).json({ error: 'URL is required' });
    }

    console.log('Scraping page:', url);

    // Fetch the webpage
    const response = await fetch(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
      }
    });

    if (!response.ok) {
      throw new Error(`Failed to fetch page: ${response.status}`);
    }

    const html = await response.text();

    // Extract title
    const titleMatch = html.match(/<title[^>]*>([^<]+)<\/title>/i);
    const title = titleMatch ? titleMatch[1].trim() : 'Untitled Page';

    // Remove script and style tags
    let cleanHtml = html.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '');
    cleanHtml = cleanHtml.replace(/<style\b[^<]*(?:(?!<\/style>)<[^<]*)*<\/style>/gi, '');

    // Remove HTML tags but keep the text
    let textContent = cleanHtml.replace(/<[^>]+>/g, ' ');

    // Clean up whitespace
    textContent = textContent
      .replace(/\s+/g, ' ') // Multiple spaces to single space
      .replace(/\n+/g, '\n') // Multiple newlines to single newline
      .trim();

    // Remove common navigation/footer text patterns
    textContent = textContent
      .replace(/\bHome\b|\bAbout\b|\bContact\b|\bPrivacy Policy\b|\bTerms of Service\b/gi, '')
      .replace(/Copyright.*?\d{4}/gi, '')
      .replace(/All rights reserved/gi, '');

    // Limit content length (max 50,000 characters)
    if (textContent.length > 50000) {
      textContent = textContent.substring(0, 50000) + '... [Content truncated]';
    }

    console.log(`Scraped ${textContent.length} characters from ${url}`);

    return res.status(200).json({
      success: true,
      url,
      title,
      content: textContent,
      wordCount: textContent.split(/\s+/).filter(w => w.length > 0).length
    });

  } catch (error) {
    console.error('Error scraping page:', error);
    return res.status(500).json({
      error: 'Failed to scrape page',
      message: error.message
    });
  }
}
