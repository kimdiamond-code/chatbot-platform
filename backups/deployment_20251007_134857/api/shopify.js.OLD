// Consolidated Shopify API - All operations in one endpoint
import fetch from 'cross-fetch';

// Helper to get store credentials from request
function getStoreCredentials(req) {
  const authHeader = req.headers.authorization;
  if (!authHeader?.startsWith('Bearer ')) {
    throw new Error('Missing authorization header');
  }
  
  const credentials = JSON.parse(
    Buffer.from(authHeader.replace('Bearer ', ''), 'base64').toString()
  );
  
  return credentials;
}

// Shopify API request helper
async function shopifyRequest(shop, accessToken, endpoint, options = {}) {
  const url = `https://${shop}/admin/api/2024-01/graphql.json`;
  
  const response = await fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-Shopify-Access-Token': accessToken,
    },
    body: JSON.stringify(options),
  });

  if (!response.ok) {
    throw new Error(`Shopify API error: ${response.statusText}`);
  }

  return response.json();
}

// OAuth handlers
async function handleOAuthAuth(req, res) {
  const { shop } = req.query;
  
  if (!shop) {
    return res.status(400).json({ error: 'Missing shop parameter' });
  }

  const scopes = process.env.SHOPIFY_SCOPES || 'read_products,read_orders';
  const redirectUri = process.env.SHOPIFY_REDIRECT_URI;
  const clientId = process.env.SHOPIFY_CLIENT_ID;

  const authUrl = `https://${shop}/admin/oauth/authorize?client_id=${clientId}&scope=${scopes}&redirect_uri=${redirectUri}`;

  res.redirect(authUrl);
}

async function handleOAuthToken(req, res) {
  const { code, shop } = req.query;

  if (!code || !shop) {
    return res.status(400).json({ error: 'Missing code or shop' });
  }

  try {
    const response = await fetch(`https://${shop}/admin/oauth/access_token`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        client_id: process.env.SHOPIFY_CLIENT_ID,
        client_secret: process.env.SHOPIFY_CLIENT_SECRET,
        code,
      }),
    });

    const data = await response.json();
    res.status(200).json(data);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
}

// Products operations
async function handleProducts(req, res, credentials) {
  const { shop, accessToken } = credentials;
  const { query, limit = 10 } = req.query;

  const graphqlQuery = `{
    products(first: ${limit}${query ? `, query: "${query}"` : ''}) {
      edges {
        node {
          id
          title
          description
          priceRange {
            minVariantPrice { amount currencyCode }
          }
          images(first: 1) {
            edges { node { url } }
          }
        }
      }
    }
  }`;

  const data = await shopifyRequest(shop, accessToken, 'graphql', { query: graphqlQuery });
  res.status(200).json(data);
}

// Orders operations
async function handleOrders(req, res, credentials) {
  const { shop, accessToken } = credentials;
  const { orderId } = req.query;

  if (orderId) {
    // Get specific order
    const graphqlQuery = `{
      order(id: "${orderId}") {
        id
        name
        createdAt
        totalPrice
        lineItems(first: 10) {
          edges {
            node {
              title
              quantity
              originalUnitPrice
            }
          }
        }
      }
    }`;
    
    const data = await shopifyRequest(shop, accessToken, 'graphql', { query: graphqlQuery });
    res.status(200).json(data);
  } else {
    // List orders
    const graphqlQuery = `{
      orders(first: 10) {
        edges {
          node {
            id
            name
            createdAt
            totalPrice
          }
        }
      }
    }`;
    
    const data = await shopifyRequest(shop, accessToken, 'graphql', { query: graphqlQuery });
    res.status(200).json(data);
  }
}

// Customer operations
async function handleCustomers(req, res, credentials) {
  const { shop, accessToken } = credentials;
  const { email } = req.query;

  const graphqlQuery = `{
    customers(first: 1, query: "email:${email}") {
      edges {
        node {
          id
          email
          firstName
          lastName
          ordersCount
          totalSpent
        }
      }
    }
  }`;

  const data = await shopifyRequest(shop, accessToken, 'graphql', { query: graphqlQuery });
  res.status(200).json(data);
}

// Cart operations
async function handleCart(req, res, credentials) {
  const { shop, accessToken } = credentials;

  if (req.method === 'POST') {
    const { lineItems } = req.body;
    
    // Create checkout
    const graphqlQuery = `
      mutation {
        checkoutCreate(input: {
          lineItems: ${JSON.stringify(lineItems)}
        }) {
          checkout {
            id
            webUrl
          }
        }
      }
    `;
    
    const data = await shopifyRequest(shop, accessToken, 'graphql', { query: graphqlQuery });
    res.status(200).json(data);
  } else {
    res.status(405).json({ error: 'Method not allowed' });
  }
}

// Inventory operations
async function handleInventory(req, res, credentials) {
  const { shop, accessToken } = credentials;
  const { productId } = req.query;

  const graphqlQuery = `{
    product(id: "${productId}") {
      variants(first: 10) {
        edges {
          node {
            id
            inventoryQuantity
            availableForSale
          }
        }
      }
    }
  }`;

  const data = await shopifyRequest(shop, accessToken, 'graphql', { query: graphqlQuery });
  res.status(200).json(data);
}

// Verify connection
async function handleVerify(req, res, credentials) {
  const { shop, accessToken } = credentials;

  try {
    const graphqlQuery = `{ shop { name email } }`;
    const data = await shopifyRequest(shop, accessToken, 'graphql', { query: graphqlQuery });
    
    res.status(200).json({ 
      connected: true, 
      shop: data.data.shop 
    });
  } catch (error) {
    res.status(200).json({ 
      connected: false, 
      error: error.message 
    });
  }
}

// Main handler
export default async function handler(req, res) {
  // Enable CORS
  res.setHeader('Access-Control-Allow-Credentials', true);
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET,POST,OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Authorization,Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  const { action } = req.query;

  try {
    // OAuth endpoints (no auth required)
    if (action === 'oauth-auth') {
      return await handleOAuthAuth(req, res);
    }
    
    if (action === 'oauth-token') {
      return await handleOAuthToken(req, res);
    }

    // All other endpoints require credentials
    const credentials = getStoreCredentials(req);

    switch (action) {
      case 'products':
        return await handleProducts(req, res, credentials);
      case 'orders':
        return await handleOrders(req, res, credentials);
      case 'customers':
        return await handleCustomers(req, res, credentials);
      case 'cart':
        return await handleCart(req, res, credentials);
      case 'inventory':
        return await handleInventory(req, res, credentials);
      case 'verify':
        return await handleVerify(req, res, credentials);
      default:
        return res.status(400).json({ error: 'Invalid action' });
    }
  } catch (error) {
    console.error('Shopify API error:', error);
    return res.status(500).json({ error: error.message });
  }
}
