// Simplified Shopify Service - Works with just store URL (limited features)\n// Perfect for customers who don't want to deal with access tokens\n\nimport { supabase } from '../supabase';\n\nclass SimplifiedShopifyService {\n  constructor() {\n    this.config = null;\n    this.baseUrl = null;\n    this.isInitialized = false;\n  }\n\n  // Load configuration from database\n  async loadConfiguration() {\n    try {\n      const { data, error } = await supabase\n        .from('integrations')\n        .select('*')\n        .eq('integration_id', 'shopify')\n        .eq('organization_id', '00000000-0000-0000-0000-000000000001')\n        .single();\n\n      if (data && data.credentials) {\n        this.config = data.credentials;\n        this.initializeClient();\n        return this.config;\n      }\n      \n      return null;\n    } catch (error) {\n      console.error('Error loading Shopify configuration:', error);\n      return null;\n    }\n  }\n\n  // Initialize with available configuration\n  initializeClient() {\n    if (this.config && this.config.storeName) {\n      this.baseUrl = `https://${this.config.storeName}.myshopify.com`;\n      this.isInitialized = true;\n      console.log('ðŸ”§ Simplified Shopify service initialized for store:', this.config.storeName);\n    }\n  }\n\n  // Check if service is configured\n  async isConnected() {\n    if (!this.isInitialized) {\n      await this.loadConfiguration();\n    }\n    return this.isInitialized;\n  }\n\n  // Test store exists (public endpoint)\n  async testStoreExists() {\n    if (!await this.isConnected()) {\n      return {\n        success: false,\n        message: 'No store configured',\n        needsSetup: true\n      };\n    }\n\n    try {\n      // Test if store exists by checking public endpoint\n      const response = await fetch(`${this.baseUrl}`, {\n        method: 'HEAD',\n        mode: 'no-cors'\n      });\n      \n      return {\n        success: true,\n        message: `Store ${this.config.storeName} exists and is accessible`,\n        connectionType: 'public-only'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Store ${this.config.storeName} not found or not accessible`\n      };\n    }\n  }\n\n  // Handle customer inquiries with general e-commerce responses\n  async handleCustomerInquiry(message, customerEmail = null) {\n    if (!await this.isConnected()) {\n      return null;\n    }\n\n    const inquiry = message.toLowerCase();\n    const storeName = this.config.storeName;\n    const storeUrl = this.baseUrl;\n\n    try {\n      // Order tracking inquiries\n      if (inquiry.includes('order') && (inquiry.includes('track') || inquiry.includes('status') || inquiry.includes('where'))) {\n        return {\n          type: 'order_tracking',\n          response: `To track your order, please visit ${storeUrl}/account/login and log into your account. You can also check your email for tracking information, or contact our support team with your order number.`,\n          connectionType: 'store-url-only'\n        };\n      }\n\n      // Product search inquiries\n      if (inquiry.includes('product') || inquiry.includes('item') || inquiry.includes('buy') || inquiry.includes('looking for')) {\n        const searchTerms = this.extractSearchTerms(inquiry);\n        const searchQuery = searchTerms.length > 0 ? searchTerms.join(' ') : 'products';\n        \n        return {\n          type: 'product_search',\n          response: `You can browse our ${searchQuery} and all products at ${storeUrl}/collections/all. Use the search function on our website to find specific items, or check out our featured collections!`,\n          connectionType: 'store-url-only'\n        };\n      }\n\n      // Inventory inquiries\n      if (inquiry.includes('stock') || inquiry.includes('available') || inquiry.includes('in stock')) {\n        return {\n          type: 'inventory_check',\n          response: `To check current availability, please visit the product page on our website at ${storeUrl}. Stock levels are updated in real-time on our site. If an item shows as out of stock, you can often sign up for restock notifications!`,\n          connectionType: 'store-url-only'\n        };\n      }\n\n      // Shipping inquiries\n      if (inquiry.includes('shipping') || inquiry.includes('delivery') || inquiry.includes('ship')) {\n        return {\n          type: 'shipping_info',\n          response: `For detailed shipping information including rates and delivery times, please visit ${storeUrl}/policies/shipping-policy. You can also view shipping options during checkout before completing your purchase.`,\n          connectionType: 'store-url-only'\n        };\n      }\n\n      // Return/exchange inquiries\n      if (inquiry.includes('return') || inquiry.includes('exchange') || inquiry.includes('refund')) {\n        return {\n          type: 'returns_info',\n          response: `Our return and exchange policy is available at ${storeUrl}/policies/refund-policy. For returns, please contact our customer service team or check your account at ${storeUrl}/account for return options.`,\n          connectionType: 'store-url-only'\n        };\n      }\n\n      // General store inquiries\n      if (inquiry.includes('store') || inquiry.includes('shop') || inquiry.includes('website')) {\n        return {\n          type: 'store_info',\n          response: `Visit our store at ${storeUrl} to browse all products, check current promotions, and complete your purchase. You can also create an account for faster checkout and order tracking!`,\n          connectionType: 'store-url-only'\n        };\n      }\n\n      // Contact/support inquiries\n      if (inquiry.includes('contact') || inquiry.includes('support') || inquiry.includes('help')) {\n        return {\n          type: 'contact_info',\n          response: `You can find our contact information and support options at ${storeUrl}/pages/contact. We're here to help with any questions about products, orders, or general inquiries!`,\n          connectionType: 'store-url-only'\n        };\n      }\n\n    } catch (error) {\n      console.error('Error handling customer inquiry:', error);\n    }\n\n    return null;\n  }\n\n  // Extract search terms from message\n  extractSearchTerms(message) {\n    const stopWords = ['product', 'item', 'buy', 'looking', 'for', 'where', 'is', 'are', 'can', 'i', 'find', 'stock', 'available', 'the', 'a', 'an'];\n    return message.toLowerCase()\n      .replace(/[^\\w\\s]/g, ' ')\n      .split(' ')\n      .filter(word => word.length > 2 && !stopWords.includes(word));\n  }\n\n  // Integration with chatbot service\n  async processCustomerMessage(message, customerData = {}) {\n    const inquiry = await this.handleCustomerInquiry(message, customerData.email);\n    \n    if (inquiry) {\n      return {\n        hasShopifyResponse: true,\n        response: inquiry.response,\n        type: inquiry.type,\n        connectionType: inquiry.connectionType || 'store-url-only',\n        confidence: 0.8\n      };\n    }\n    \n    return {\n      hasShopifyResponse: false,\n      message: 'No specific store response found'\n    };\n  }\n\n  // Save simplified configuration (just store URL)\n  async saveStoreUrl(storeUrl) {\n    try {\n      // Extract store name from URL\n      let storeName = storeUrl.toLowerCase().trim();\n      storeName = storeName.replace(/^https?:\\/\\//, '');\n      storeName = storeName.split('/')[0];\n      \n      if (storeName.includes('.myshopify.com')) {\n        storeName = storeName.split('.myshopify.com')[0];\n      }\n      \n      if (!/^[a-z0-9-]+$/.test(storeName)) {\n        throw new Error('Invalid store name format');\n      }\n\n      // Save to database\n      const configData = {\n        organization_id: '00000000-0000-0000-0000-000000000001',\n        integration_id: 'shopify',\n        integration_name: 'Shopify',\n        status: 'limited', // Special status for URL-only mode\n        credentials: {\n          storeName: storeName,\n          connectionType: 'store-url-only',\n          storeUrl: `https://${storeName}.myshopify.com`\n        },\n        config: {\n          connectionType: 'store-url-only',\n          features: ['Basic store information', 'Policy links', 'General guidance'],\n          limitations: ['No real-time data', 'No order tracking', 'No inventory levels'],\n          connectedAt: new Date().toISOString()\n        },\n        connected_at: new Date().toISOString()\n      };\n\n      const { error } = await supabase\n        .from('integrations')\n        .upsert(configData, {\n          onConflict: 'organization_id,integration_id'\n        });\n\n      if (error) {\n        throw error;\n      }\n\n      // Update runtime config\n      this.config = configData.credentials;\n      this.initializeClient();\n\n      return {\n        success: true,\n        message: 'Store URL saved successfully',\n        data: configData\n      };\n      \n    } catch (error) {\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  }\n\n  // Get configuration status\n  getConfigurationStatus() {\n    return {\n      isConfigured: !!this.config,\n      connectionType: this.config?.connectionType || null,\n      storeName: this.config?.storeName || null,\n      storeUrl: this.config?.storeUrl || null,\n      features: [\n        'Store URL linking',\n        'Policy page guidance', \n        'General customer support',\n        'Contact information'\n      ],\n      limitations: [\n        'No real-time product data',\n        'No order tracking',\n        'No inventory levels',\n        'No customer data access'\n      ]\n    };\n  }\n}\n\n// Export singleton instance\nexport const simplifiedShopifyService = new SimplifiedShopifyService();\nexport default simplifiedShopifyService;