// Consolidated Kustomer API - All operations in one endpoint
import fetch from 'cross-fetch';

// OAuth token exchange
async function handleOAuthToken(req, res) {
  const { code } = req.body;

  if (!code) {
    return res.status(400).json({ error: 'Missing authorization code' });
  }

  try {
    const tokenUrl = 'https://api.kustomerapp.com/v1/auth/token';
    
    const response = await fetch(tokenUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams({
        grant_type: 'authorization_code',
        code: code,
        client_id: process.env.KUSTOMER_CLIENT_ID,
        client_secret: process.env.KUSTOMER_CLIENT_SECRET,
        redirect_uri: process.env.KUSTOMER_REDIRECT_URI,
      }),
    });

    if (!response.ok) {
      throw new Error(`Token exchange failed: ${response.statusText}`);
    }

    const data = await response.json();
    res.status(200).json(data);
  } catch (error) {
    console.error('Kustomer OAuth error:', error);
    res.status(500).json({ error: error.message });
  }
}

// Refresh OAuth token
async function handleOAuthRefresh(req, res) {
  const { refreshToken } = req.body;

  if (!refreshToken) {
    return res.status(400).json({ error: 'Missing refresh token' });
  }

  try {
    const tokenUrl = 'https://api.kustomerapp.com/v1/auth/token';
    
    const response = await fetch(tokenUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams({
        grant_type: 'refresh_token',
        refresh_token: refreshToken,
        client_id: process.env.KUSTOMER_CLIENT_ID,
        client_secret: process.env.KUSTOMER_CLIENT_SECRET,
      }),
    });

    if (!response.ok) {
      throw new Error(`Token refresh failed: ${response.statusText}`);
    }

    const data = await response.json();
    res.status(200).json(data);
  } catch (error) {
    console.error('Kustomer refresh error:', error);
    res.status(500).json({ error: error.message });
  }
}

// Test connection
async function handleTestConnection(req, res) {
  const { apiKey } = req.body;

  if (!apiKey) {
    return res.status(400).json({ error: 'Missing API key' });
  }

  try {
    const response = await fetch('https://api.kustomerapp.com/v1/auth/customer', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json',
      },
    });

    if (response.ok) {
      const data = await response.json();
      res.status(200).json({ 
        connected: true, 
        customer: data 
      });
    } else {
      res.status(200).json({ 
        connected: false, 
        error: 'Invalid credentials' 
      });
    }
  } catch (error) {
    console.error('Kustomer test error:', error);
    res.status(500).json({ 
      connected: false, 
      error: error.message 
    });
  }
}

// Get connections
async function handleConnections(req, res) {
  const { organizationId } = req.query;

  if (!organizationId) {
    return res.status(400).json({ error: 'Missing organization ID' });
  }

  // Return stored connections (would query from database in production)
  res.status(200).json({
    connections: [
      {
        id: '1',
        organizationId,
        type: 'kustomer',
        status: 'connected',
        credentials: { masked: true },
      }
    ]
  });
}

// Main handler
export default async function handler(req, res) {
  // Enable CORS
  res.setHeader('Access-Control-Allow-Credentials', true);
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET,POST,OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  const { action } = req.query;

  try {
    switch (action) {
      case 'oauth-token':
        return await handleOAuthToken(req, res);
      case 'oauth-refresh':
        return await handleOAuthRefresh(req, res);
      case 'test-connection':
        return await handleTestConnection(req, res);
      case 'connections':
        return await handleConnections(req, res);
      default:
        return res.status(400).json({ error: 'Invalid action' });
    }
  } catch (error) {
    console.error('Kustomer API error:', error);
    return res.status(500).json({ error: error.message });
  }
}
