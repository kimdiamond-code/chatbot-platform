// API endpoint to discover links on a webpage
export default async function handler(req, res) {
  // Enable CORS
  res.setHeader('Access-Control-Allow-Credentials', true);
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS,POST');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { url } = req.body;

    if (!url) {
      return res.status(400).json({ error: 'URL is required' });
    }

    console.log('Discovering links from:', url);

    // Fetch the webpage
    const response = await fetch(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
      }
    });

    if (!response.ok) {
      throw new Error(`Failed to fetch page: ${response.status}`);
    }

    const html = await response.text();

    // Extract all links using regex
    const linkRegex = /<a[^>]+href=["']([^"']+)["']/gi;
    const links = [];
    let match;

    while ((match = linkRegex.exec(html)) !== null) {
      let link = match[1];
      
      // Skip if it's just an anchor or special protocol
      if (link.startsWith('#') || link.startsWith('mailto:') || link.startsWith('tel:') || link.startsWith('javascript:')) {
        continue;
      }

      // Handle relative URLs
      const urlObj = new URL(url);
      const baseUrl = `${urlObj.protocol}//${urlObj.hostname}`;
      
      if (link.startsWith('/')) {
        link = baseUrl + link;
      } else if (!link.startsWith('http')) {
        link = baseUrl + '/' + link;
      }

      // Only include links from the same domain
      try {
        const linkUrl = new URL(link);
        if (linkUrl.hostname === urlObj.hostname) {
          links.push(link);
        }
      } catch (e) {
        // Invalid URL, skip
      }
    }

    // Remove duplicates
    const uniqueLinks = [...new Set(links)];

    console.log(`Discovered ${uniqueLinks.length} unique links`);

    return res.status(200).json({
      success: true,
      url,
      links: uniqueLinks
    });

  } catch (error) {
    console.error('Error discovering links:', error);
    return res.status(500).json({
      error: 'Failed to discover links',
      message: error.message
    });
  }
}
